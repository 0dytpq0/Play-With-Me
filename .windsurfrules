# General Code Style & Formatting

- Follow the Airbnb Style Guide for code formatting.
- Prefer named exports for components.
- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

# Naming Conventions

- Use PascalCase for classes.
- Use PascalCase for React component file names (e.g., UserCard.tsx, not user-card.tsx).
- Use camelCase for variables, functions, directories, files and methods.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.

# Functions & Logic

- Keep functions short and single-purpose (<20 lines).
- Avoid deeply nested blocks by:
- Using early returns.
- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions for simple cases (<3 instructions), named functions otherwise.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.

# Data Handling

- Avoid excessive use of primitive types; encapsulate data in composite types.
- Avoid placing validation inside functionsâ€”use classes with internal validation instead.
- Prefer immutability for data:
- Use readonly for immutable properties.
- Use as const for literals that never change.

# Project Structure & Architecture

- Follow Next.js patterns and use the App Router.
- Use server components for performance.
- Use client components for interactivity.
- Use server actions for server-side logic.
- Follow F.S.D (Feature Sliced Design) architecture.
- Correctly determine when to use server vs. client components in Next.js.

# Styling & UI

- Use Tailwind CSS for styling.
- Use Shadcn UI for components.

# Data Fetching & Forms

- Use TanStack Query (react-query) for frontend data fetching.
- Use React Hook Form for form handling.
- Use Zod for validation.

# State Management & Logic

- Use Zustand for state management.
- Use React Query for data fetching.
- Use React Hook Form for form handling.
- Use Zod for validation.

# Backend & Database

- Use Supabase for database access.
